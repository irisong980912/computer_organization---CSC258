module project
	(
		CLOCK,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK;				//	50 MHz
	input   [9:0]   SW;
	input   [3:0]   KEY;

	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	wire draw;
	wire resetn;
	assign resetn = KEY[0];
	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn/plot
	// for the VGA controller, in addition to any other functionality your design may require.
    
	 
	 
    combined c1 (
		.clock(CLOCK),
		.resetn(KEY[0]),
		.go(~KEY[1]),
		
		.out_x(x),
		.out_y(y),
		.colour(colour),
		.plot(writeEn)
	);
endmodule






//module character (clock, resetn, out_x, out_y, colour, plot, jump, crawl);
//module obstacle (clock, resetn, go, out_x, out_y, colour, plot);


module combined(clock, resetn, jump, crawl, go, 
						out_x, out_y, colour, plot);
						
		///////////////////////////////////////////////////input				
		input clock, resetn, jump, crawl, go;
		
		//////////////////////////////////////////////////output
		output reg [7:0] out_x;
		output reg [6:0] out_y;
		output reg [2:0] colour;
		output reg plot;
		
		///////////////////////////////////////////////////wire
		wire [7:0] character_out_x, obstacle_out_x;
		wire [6:0] character_out_y, obstacle_out_y;
		wire character_plot, obstacle_plot;
		
		character c0(clock, resetn, character_out_x, character_out_y, character_colour, character_plot, jump, crawl);
		
		obstacle b0(clock, resetn, go, obstacle_out_x, obstacle_out_y, obstacle_colour, obstacle_plot);
		
		///////////////////////////////////////////////////counter
		reg [5:0] counter;
		
		always @(posedge clock)
		begin
			if (resetn == 0)
				counter <= 6'd0;
			else if (counter == 6'd0)
				counter <= 6'b100000;
			else
				counter <= counter - 6'd1;		
		end
		
		/////////////////////////////////////////////////shifting
		always @(posedge clock)
		begin
			if (resetn == 0) begin
				out_x <= 8'd0;
				out_y <= 7'd0;
				colour <= 3'b111;
				plot <= 1'b0;
				end
			else if (counter > 6'd16) begin
				out_x <= character_out_x;
				out_y <= character_out_y;
				colour <= character_colour;
				plot <= character_plot;
				end
			else begin
				out_x <= obstacle_out_x;
				out_y <= obstacle_out_y;
				colour <= obstacle_colour;
				plot <= obstacle_plot;
				end
		end
		
		
		
endmodule 
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						

